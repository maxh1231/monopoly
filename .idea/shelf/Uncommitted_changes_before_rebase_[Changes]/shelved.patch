Index: src/monopoly/Monopoly.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.Collections;\r\nimport java.util.Stack;\r\n\r\npublic class Monopoly {\r\n    private int[] board = new int[40];\r\n    private int currentPosition = 0;\r\n\tprivate int turnsInJail = 0;\r\n    private boolean inJail = false;\r\n    private boolean getOutOfJailFreeChance = false;\r\n\tprivate boolean getOutOfJailFreeCommunity = false;\r\n    private Dice dice = new Dice();\r\n    private Stack<String> communityChestCards = new Stack<>();\r\n    private Stack<String> chanceCards = new Stack<>();\r\n\r\n    public Monopoly() {\r\n        loadCards();\r\n    }\r\n\r\n    private void loadCards() {\r\n\t\tif (!getOutOfJailFreeCommunity){\r\n\t\t\tcommunityChestCards.push(\"Get out of Jail Free\");\r\n\t\t}\r\n\t\tcommunityChestCards.push(\"Advance to Go\");\r\n\t\tcommunityChestCards.push(\"Go to Jail\");\r\n\t\tfor (int i = 0; i < 13; i++) {\r\n\t\t\tcommunityChestCards.push(\"NA\");\r\n\t\t}\r\n\r\n        Collections.shuffle(communityChestCards);\r\n\r\n\t\tif (!getOutOfJailFreeChance){\r\n\t\t\tchanceCards.push(\"Get Out of Jail Free\");\r\n\t\t}\r\n        chanceCards.push(\"Advance to Boardwalk\");\r\n\t\tchanceCards.push(\"Advance to Go\");\r\n\t\tchanceCards.push(\"Advance to Illinois Avenue\");\r\n\t\tchanceCards.push(\"Advance to St. Charles Place\");\r\n\t\tchanceCards.push(\"Advance to the nearest Railroad\");\r\n\t\tchanceCards.push(\"Advance to the nearest Railroad\");\r\n\t\tchanceCards.push(\"Advance token to nearest Utility\");\r\n\t\tchanceCards.push(\"Go Back 3 Spaces\");\r\n\t\tchanceCards.push(\"Go to Jail\");\r\n\t\tchanceCards.push(\"Take a trip to Reading Railroad\");\r\n\t\tfor (int i = 0; i < 5; i++){\r\n\t\t\tchanceCards.push(\"NA\");\r\n\t\t}\r\n\r\n        Collections.shuffle(chanceCards);\r\n    }\r\n\r\n    public void movePlayer() {\r\n        DiceResult diceResult = dice.RollDice();\r\n\r\n\t\tif (diceResult.getConsecutiveDoublesCount() == 3){\r\n\t\t\tgoToJail();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n        if (inJail) {\r\n            handleJailA(diceResult);\r\n\t\t\tif (inJail){\r\n\t\t\t\tturnsInJail++;\r\n\t\t\t\treturn; // Onlly return if player did not get out after handleJail\r\n\t\t\t}\r\n            diceResult.set_consecutiveDoublesCount(0);\r\n        }\r\n\r\n        int spacesToMove = diceResult.getDiceRoll1() + diceResult.getDiceRoll2();\r\n        currentPosition = (currentPosition + spacesToMove) % 40;\r\n        board[currentPosition]++;\r\n\r\n        if (currentPosition == 30) {\r\n            goToJail();\r\n        } else {\r\n            checkLandingPosition();\r\n        }\r\n    }\r\n\r\n    private void handleJailB(DiceResult diceResult) {\r\n        if (getOutOfJailFreeChance) {\r\n            getOutOfJailFreeChance = false;\r\n            inJail = false;\r\n            return;\r\n        } else if (getOutOfJailFreeCommunity) {\r\n\t\t\tgetOutOfJailFreeCommunity = false;\r\n            inJail = false;\r\n            return;\r\n\t\t}\r\n        if (diceResult.isDoubles()) {\r\n            inJail = false;\r\n        }\r\n\t\tif (turnsInJail == 3){\r\n\t\t\tturnsInJail = 0;\r\n\t\t\tinJail = false;\r\n\t\t}\r\n    }\r\n\r\n\t// player gets out of jail either way for strategy A\r\n\tprivate void handleJailA(DiceResult diceResult) {\r\n        if (getOutOfJailFreeChance) {\r\n            getOutOfJailFreeChance = false;\r\n        } else if (getOutOfJailFreeCommunity) {\r\n\t\t\tgetOutOfJailFreeCommunity = false;\r\n\t\t}\r\n        inJail = false;\r\n    }\r\n\r\n    private void goToJail() {\r\n        currentPosition = 10;\r\n        inJail = true;\r\n    }\r\n\r\n    private void checkLandingPosition() {\r\n        switch (currentPosition) {\r\n            case 2:\r\n            case 17:\r\n            case 33:\r\n                drawCard(communityChestCards);\r\n                break;\r\n            case 7:\r\n            case 22:\r\n            case 36:\r\n                drawCard(chanceCards);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void drawCard(Stack<String> cards) {\r\n        if (cards.isEmpty()) {\r\n            loadCards(); \r\n        }\r\n        String card = cards.pop();\r\n        executeCardAction(card);\r\n    }\r\n\r\n    private void executeCardAction(String card) {\r\n        //System.out.println(\"Card drawn: \" + card);\r\n        // TODO\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Monopoly game = new Monopoly();\r\n        for (int i = 0; i < 1000000; i++) {\r\n            game.movePlayer();\r\n        }\r\n\r\n        CsvExport.exportToCSV(\"counts.csv\", game.board);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/monopoly/Monopoly.java b/src/monopoly/Monopoly.java
--- a/src/monopoly/Monopoly.java	(revision d618932872f21f1db56b9973be6a8f8deb6215f0)
+++ b/src/monopoly/Monopoly.java	(date 1714102004505)
@@ -12,7 +12,9 @@
 	private boolean getOutOfJailFreeCommunity = false;
     private Dice dice = new Dice();
     private Stack<String> communityChestCards = new Stack<>();
+    private Stack<String> discardPileCommunityChest = new Stack<>();
     private Stack<String> chanceCards = new Stack<>();
+    private Stack<String> discardPileChance = new Stack<>();
 
     public Monopoly() {
         loadCards();
